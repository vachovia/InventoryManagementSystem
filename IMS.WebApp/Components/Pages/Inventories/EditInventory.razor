@page "/editinventory/{invId:int}"

@attribute [Authorize(Policy = "Inventory")]

@inject IEditInventoryUseCase EditInventoryUseCase;
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase;
@inject NavigationManager NavigationManager;

<h3>Edit Inventory @invId</h3>
<br />

@if (inventory is not null)
{
    <EditForm Model="inventory" FormName="formInventory" OnValidSubmit="Update">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <InputNumber @bind-Value="inventory.InventoryId" hidden></InputNumber>
        <div class="form-group">
            <label for="name">Inventory Name</label>
            <InputText id="name" @bind-Value="inventory.InventoryName" class="form-control"></InputText>
            <ValidationMessage For="() => inventory.InventoryName"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="inventory.Quantity" class="form-control"></InputNumber>
            <ValidationMessage For="() => inventory.Quantity"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="inventory.Price" class="form-control"></InputNumber>
            <ValidationMessage For="() => inventory.Price"></ValidationMessage>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Update</button>&nbsp;
        <a href="/inventories" class="btn btn-outline-secondary">Cancel</a>
    </EditForm>
}



@code {
    [Parameter]
    public int invId { get; set; }

    [SupplyParameterFromForm]
    private InventoryViewModel? inventory { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if(inventory is null)
        {
            // we use ??= because while POST it goes to the same /editinventory url
            // and fetches same inventory and overrides edited form values
            // it goes through same life cycle and calls OnParametersSetAsync again
            // If inventory form fulfilled then don't GET inventory from repository
            // inventory ??= await ViewInventoryByIdUseCase.ExecuteAsync(invId);
            var inv = await ViewInventoryByIdUseCase.ExecuteAsync(invId);

            inventory = new InventoryViewModel
            {
                InventoryId = inv.InventoryId,
                InventoryName = inv.InventoryName,
                Price = inv.Price,
                Quantity = inv.Quantity
            };
        }        
    }

    private async Task Update()
    {
        if(inventory is not null)
        {
            var inv = new Inventory
            {
                InventoryId = inventory.InventoryId,
                InventoryName = inventory.InventoryName,
                Price = inventory.Price,
                Quantity = inventory.Quantity
            };

            await EditInventoryUseCase.ExecuteAsync(inv);

            NavigationManager.NavigateTo("/inventories");
        }        
    }
}

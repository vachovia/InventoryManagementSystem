@page "/editproduct/{prodId:int}"

@attribute [Authorize(Policy = "Inventory")]

@rendermode InteractiveServer

@inject IViewProductByIdUseCase ViewProductByIdUseCase;
@inject IEditProductUseCase EditProductUseCase;
@inject NavigationManager NavigationManager;

<h3>Edit Product</h3>
<br />

@* FormName="formProduct" - We are using InteractiveServer, so we are not posting form and we can live without it *@

@if (product is not null)
{
    <EditForm Model="product" OnValidSubmit="Update">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
            <ValidationMessage For="() => product.ProductName"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control"></InputNumber>
            <ValidationMessage For="() => product.Quantity"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
            <ValidationMessage For="() => product.Price"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>Inventories</label>
            <ProductInventoriesComponent Product="product"></ProductInventoriesComponent>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Update</button>&nbsp;
        <button type="button" class="btn btn-outline-secondary" @onclick="() => CancelUpdate()">Cancel</button>
        @* <a href="/products" class="btn btn-outline-secondary">Cancel</a> *@
    </EditForm>
}

@code {
    [Parameter]
    public int prodId { get; set; }
    
    private Product? product { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        product = await ViewProductByIdUseCase.ExecuteAsync(prodId);
    }

    private async Task Update()
    {
        if (product is not null)
        {
            await EditProductUseCase.ExecuteAsync(product);

            NavigationManager.NavigateTo("/products");
        }
    }

    private void CancelUpdate()
    {
        NavigationManager.NavigateTo("/products");
    }
}

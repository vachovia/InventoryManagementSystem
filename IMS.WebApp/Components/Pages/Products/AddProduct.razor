@page "/addproduct"

@rendermode InteractiveServer

@inject IAddProductUseCase AddProductUseCase;
@inject NavigationManager NavigationManager;

<h3>Add Product</h3>
<br />

@* FormName="formProduct" - We are using InteractiveServer, so we are not posting form and we can live without it *@

<EditForm Model="product"  OnValidSubmit="Save">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <label for="name">Product Name</label>
        <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        <ValidationMessage For="() => product.ProductName"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        <ValidationMessage For="() => product.Quantity"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        <ValidationMessage For="() => product.Price"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="inventories">Inventories</label>
        <SearchProductInventoriesComponent></SearchProductInventoriesComponent>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">Save</button>&nbsp;
    <a href="/products" class="btn btn-outline-secondary">Cancel</a>
</EditForm>

@code {
    // [SupplyParameterFromForm] - we don't need this because of @bind-Value is 2-way data binding
    private Product product { get; set; } = new Product();

    private async Task Save()
    {
        await AddProductUseCase.ExecuteAsync(product);
        NavigationManager.NavigateTo("/products");
    }
}

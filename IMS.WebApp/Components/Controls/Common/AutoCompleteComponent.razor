<div class="form-group">
    <label for="search">@Label</label>
    <input type="text" class="form-control" @bind-value="userInput" @bind-value:event = "oninput" @onkeyup="OnKeyup"/>
</div>
@if (searchResults is not null && searchResults.Count > 0)
{
    <div class="search-result">
        <ul>
            @{
                int itemIndex = 0;
                foreach (var item in searchResults)
                {
                    <li @key="@item.Id" class="@(itemIndex == currentItemIndex ? "selected" : "")" @onclick="() => HandleSelectItem(item)">
                        @item.Name
                    </li>
                    itemIndex++;
                }                
            }
        </ul>
    </div>
}


@code {
    [Parameter]
    public string Label { get; set; } = "Search";
    [Parameter]
    public Func<string, Task<List<ItemViewModel>>>? SearchFunction { get; set; }
    // similar to Func<string, List<ItemViewModel>>
    // public delegate List<ItemViewModel> SearchFunction(string searchFilter);
    [Parameter]
    public EventCallback<ItemViewModel> OnItemSelected { get; set; }

    private string _userInput = string.Empty;
    private List<ItemViewModel>? searchResults = null;
    private ItemViewModel? selectedItem = null;
    private ItemViewModel? currentItem = null;
    private int currentItemIndex = -1;

    public string userInput {
        get => _userInput;
        set {
            _userInput = value;

            if (!string.IsNullOrEmpty(_userInput) && SearchFunction is not null)
            {
                ViewItemsAsync();
            }
        }
    }

    private async Task ViewItemsAsync()
    {
        if (SearchFunction is not null)
        {
            searchResults = await SearchFunction(_userInput);

            StateHasChanged();
        }
    }

    private void HandleSelectItem(ItemViewModel item)
    {
        selectedItem = item;        
        userInput = item.Name;
        searchResults = null;
        currentItem = null;
        currentItemIndex = -1;
        OnItemSelected.InvokeAsync(item);
    }

    public void OnKeyup(KeyboardEventArgs e)
    {
        if (searchResults is not null && searchResults.Count > 0)
        {
            if (e.Code == "ArrowDown")
            {
                if (currentItemIndex < searchResults.Count - 1)
                {
                    currentItem = searchResults[++currentItemIndex];
                }
                else
                {
                    currentItem = searchResults[0];
                    currentItemIndex = 0;
                }
            }
            else if (e.Code == "ArrowUp")
            {
                if (currentItemIndex > 0)
                {
                    currentItem = searchResults[--currentItemIndex];
                }
                else
                {
                    currentItem = searchResults[searchResults.Count - 1];
                    currentItemIndex = searchResults.Count - 1;
                }
            }
            else if ((e.Code == "Enter" || e.Code == "NumpadEnter") && currentItem is not null)
            {
                HandleSelectItem(currentItem);
            }
        }
    }
}

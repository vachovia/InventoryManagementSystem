@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<div class="input-group">
    <input class="form-control" placeholder="Type something to search" @bind-value="this.searchFilter" @bind-value:event="oninput"></input>&nbsp;
    <button type="button" class="btn-success input-group-text" @onclick="HandleSearch">Search</button>
</div>

@if(inventories is not null && inventories.Count > 0)
{
    <div class="search-result">
        <ul>
            @foreach (var inv in inventories)
            {
                <li @key="@inv.InventoryId" @onclick="() => { HandleSelectInventory(inv); }">
                    @inv.InventoryName
                </li>
            }
        </ul>
    </div>    
}

@* For regular input we use @bind-value with lower case 'v' *@

@code {

    [Parameter]
    public EventCallback<Inventory> OnInventorySelected { get; set; }

    private string? _searchFilter;
    private string searchFilter
    {
        get => _searchFilter ?? string.Empty;
        set
        {
            _searchFilter = value;
            HandleSearch();
        }
    }

    private List<Inventory> inventories = new();

    private async Task HandleSearch()
    {
        // await Task.Delay(2000); // UI already rendered and after 2 secs it will not update UI so why we use StateHasChanged
        inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(searchFilter)).ToList();
        StateHasChanged();
    }

    private async Task HandleSelectInventory(Inventory inventory)
    {
        await OnInventorySelected.InvokeAsync(inventory);
        inventories.Clear();
    }
}
